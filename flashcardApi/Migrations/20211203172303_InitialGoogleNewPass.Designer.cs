// <auto-generated />
using System;
using System.Collections.Generic;
using FlashcardApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace flashcardApi.Migrations
{
    [DbContext(typeof(FlashCardContext))]
    [Migration("20211203172303_InitialGoogleNewPass")]
    partial class InitialGoogleNewPass
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("FlashcardApi.Models.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Back")
                        .HasColumnType("text");

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<long?>("DeckId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Front")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeckId1");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("FlashcardApi.Models.Deck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("FlashcardApi.Models.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("Options")
                        .HasColumnType("text[]");

                    b.Property<string>("Query")
                        .HasColumnType("text");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.Property<long?>("QuizId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuizId1");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("FlashcardApi.Models.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("FlashcardApi.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FirebaseID")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlashcardApi.Models.Card", b =>
                {
                    b.HasOne("FlashcardApi.Models.Deck", "Deck")
                        .WithMany("Cards")
                        .HasForeignKey("DeckId1");

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("FlashcardApi.Models.Deck", b =>
                {
                    b.HasOne("FlashcardApi.Models.User", "User")
                        .WithMany("Decks")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardApi.Models.Question", b =>
                {
                    b.HasOne("FlashcardApi.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId1");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("FlashcardApi.Models.Quiz", b =>
                {
                    b.HasOne("FlashcardApi.Models.User", "User")
                        .WithMany("Quizzes")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardApi.Models.Deck", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("FlashcardApi.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("FlashcardApi.Models.User", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("Quizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
